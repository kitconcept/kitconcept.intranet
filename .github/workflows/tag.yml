name: 'kitconcept Intranet - Tag'

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

env:
  IMAGE_NAME_PREFIX: ghcr.io/kitconcept/kitconcept-intranet
  NODE_VERSION: 22.x

jobs:

  config:
    name: "Config: Compute values used in workflow"
    uses: ./.github/workflows/config.yml

  backend:
    runs-on: ubuntu-latest
    needs:
      - config
    permissions:
      contents: read
      packages: write

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME_PREFIX }}-backend
          labels: |
            org.label-schema.docker.cmd=docker run -d -p 8080:8080 ${{ env.IMAGE_NAME_PREFIX }}-backend:${{ github.ref_name }}
          flavor:
            latest=false
          tags: |
            type=ref,event=branch
            type=sha
            type=pep440,pattern={{version}}
            type=pep440,pattern={{major}}.{{minor}}
            type=pep440,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          context: backend
          file: backend/Dockerfile
          build-args: |
            PLONE_VERSION=${{ needs.config.outputs.PLONE_VERSION }}
          load: true
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Docker meta Beispiele
        id: meta-beispiele
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME_PREFIX }}-beispiele
          labels: |
            org.label-schema.docker.cmd=docker run -d -p 8080:8080 ${{ env.IMAGE_NAME_PREFIX }}-beispiele:${{ github.ref_name }}
          flavor:
            latest=false
          tags: |
            type=ref,event=branch
            type=sha
            type=pep440,pattern={{version}}
            type=pep440,pattern={{major}}.{{minor}}
            type=pep440,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: "Beispiele: Build and push"
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          context: backend
          file: backend/Dockerfile.beispiele
          build-args: |
            SEED="${{ github.run_id }}${{ github.sha }}"
            IMAGE_TAG=${{ github.ref_name }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-beispiele.outputs.tags }}
          labels: ${{ steps.meta-beispiele.outputs.labels }}

  frontend:
    runs-on: ubuntu-latest
    needs:
      - config
    permissions:
      contents: read
      packages: write

    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Enable corepack
        run: npm i -g corepack@latest && corepack enable

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: ./frontend
        run: make install

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME_PREFIX }}-frontend
          labels: |
            org.label-schema.docker.cmd=docker run -d -p 3000:3000 ${{ env.IMAGE_NAME_PREFIX }}-frontend:${{ github.ref_name }}
          flavor:
            latest=false
          tags: |
            type=ref,event=branch
            type=sha
            type=pep440,pattern={{version}}
            type=pep440,pattern={{major}}.{{minor}}
            type=pep440,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          context: frontend/
          file: frontend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VOLTO_VERSION=${{ needs.config.outputs.VOLTO_VERSION }}

  deploy:
    name: "Deploy: ${{ needs.config.outputs.hostname }}"
    uses: kitconcept/meta/.github/workflows/deploy.yml@main
    needs:
      - config
      - backend
      - frontend
    with:
        tag: ${{ github.ref_name }}
        environment: ${{ needs.config.outputs.environment }}
        stack-name: ${{ needs.config.outputs.stack-name }}
        stack-file: ${{ needs.config.outputs.stack-file }}
        registry: "ghcr.io"
        username: ${{ github.actor }}
    secrets:
        password: ${{ secrets.GITHUB_TOKEN }}
        remote-host: ${{ secrets.DEPLOY_HOST }}
        remote-port: ${{ secrets.DEPLOY_PORT }}
        remote-user: ${{ secrets.DEPLOY_USER }}
        remote-private-key: ${{ secrets.DEPLOY_SSH }}
        env-file: |
            IMAGE_NAME_PREFIX=${{ needs.config.outputs.image-name-prefix }}
            IMAGE_TAG=${{ github.ref_name }}
            STACK_NAME=${{ needs.config.outputs.stack-name }}
            STACK_PREFIX=${{ needs.config.outputs.stack-prefix }}
            HOSTNAME=${{ needs.config.outputs.hostname }}
            CERTRESOLVER=${{ needs.config.outputs.certresolver }}
    permissions:
        contents: read
        packages: write
