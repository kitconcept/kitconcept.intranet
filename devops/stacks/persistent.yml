---
version: '3.9'

services:

  frontend:
    image: ${IMAGE_NAME_PREFIX}-frontend:${IMAGE_TAG:-latest}
    environment:
      RAZZLE_INTERNAL_API_PATH: http://${STACK_NAME}_backend:8080/Plone
      RAZZLE_API_PATH: https://${HOSTNAME}
    networks:
      - public
    healthcheck:
      disable: true
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.labels.type == app
          - node.labels.env == production
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      labels:
        - traefik.enable=true
        - traefik.constraint-label=public
        # Service
        - traefik.http.services.svc-${STACK_PREFIX}-front.loadbalancer.server.port=3000
        # Routers
        ## /
        - traefik.http.routers.rt-${STACK_PREFIX}-front.rule=Host(`${HOSTNAME}`)
        - traefik.http.routers.rt-${STACK_PREFIX}-front.entrypoints=https
        - traefik.http.routers.rt-${STACK_PREFIX}-front.tls=true
        - traefik.http.routers.rt-${STACK_PREFIX}-front.tls.certresolver=${CERTRESOLVER}
        - traefik.http.routers.rt-${STACK_PREFIX}-front.service=svc-${STACK_PREFIX}-front
        - traefik.http.routers.rt-${STACK_PREFIX}-front.middlewares=gzip

  backend:
    image: ${IMAGE_NAME_PREFIX}-backend:${IMAGE_TAG:-latest}
    environment:
      ZEO_ADDRESS: "${STACK_NAME}_zeo:8100"
    networks:
      - public
      - nw-internal
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.type == app
          - node.labels.env == production
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
      labels:
        - traefik.enable=true
        - traefik.constraint-label=public
        # Services
        - traefik.http.services.svc-${STACK_PREFIX}-back.loadbalancer.server.port=8080
        # Middlewares
        ## VHM rewrite /++api++/
        - "traefik.http.middlewares.mw-${STACK_PREFIX}-back-vhm-api.replacepathregex.regex=^/\\+\\+api\\+\\+($$|/.*)"
        - "traefik.http.middlewares.mw-${STACK_PREFIX}-back-vhm-api.replacepathregex.replacement=/VirtualHostBase/https/${HOSTNAME}/Plone/++api++/VirtualHostRoot$$1"
        ## VHM rewrite /ClassicUI/
        - "traefik.http.middlewares.mw-${STACK_PREFIX}-back-vhm-classic.replacepathregex.regex=^/ClassicUI($$|/.*)"
        - "traefik.http.middlewares.mw-${STACK_PREFIX}-back-vhm-classic.replacepathregex.replacement=/VirtualHostBase/https/${HOSTNAME}/Plone/VirtualHostRoot/_vh_ClassicUI$$1"
        ## Basic Authentication
        - traefik.http.middlewares.mw-${STACK_PREFIX}-back-auth.basicauth.users=${BASIC_AUTH_USER}:${BASIC_AUTH_PASSWORD_CLASSICUI}

        # Routes
        ## /++api++
        - traefik.http.routers.rt-${STACK_PREFIX}-back-api.rule=Host(`${HOSTNAME}`) && PathPrefix(`/++api++`)
        - traefik.http.routers.rt-${STACK_PREFIX}-back-api.entrypoints=https
        - traefik.http.routers.rt-${STACK_PREFIX}-back-api.tls=true
        - traefik.http.routers.rt-${STACK_PREFIX}-back-api.service=svc-${STACK_PREFIX}-back
        - traefik.http.routers.rt-${STACK_PREFIX}-back-api.middlewares=gzip,mw-${STACK_PREFIX}-back-vhm-api
        ## /ClassicUI
        - traefik.http.routers.rt-${STACK_PREFIX}-back-classic.rule=Host(`${HOSTNAME}`) && PathPrefix(`/ClassicUI`)
        - traefik.http.routers.rt-${STACK_PREFIX}-back-classic.entrypoints=https
        - traefik.http.routers.rt-${STACK_PREFIX}-back-classic.tls=true
        - traefik.http.routers.rt-${STACK_PREFIX}-back-classic.service=svc-${STACK_PREFIX}-back
        - traefik.http.routers.rt-${STACK_PREFIX}-back-classic.middlewares=gzip,mw-${STACK_PREFIX}-back-auth,mw-${STACK_PREFIX}-back-vhm-classic

  zeo:
    image: plone/plone-zeo:6.0.0
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 1s
        order: stop-first
      placement:
        constraints:
          - node.labels.type == data
          - node.labels.env == ${PLACEMENT_LABEL:-staging}
    volumes:
      - vol-site-data:/data
    networks:
      - nw-internal

volumes:
  vol-site-data:
    driver_opts:
      type: none
      device: "/srv/${STACK_PREFIX}/data"
      o: bind

networks:
  public:
    external: true
  nw-internal:
    internal: true
    driver: overlay
    driver_opts:
      com.docker.network.driver.mtu: 1450
