name: 'kitconcept-intranet: Compute Config variables'

on:
  workflow_call:
    inputs:
      hostname:
        required: false
        type: string
        default: "plone-intranet.kitconcept.dev"
      certresolver:
        required: false
        type: string
        default: "le-cloudflare"
      stack-prefix:
        required: false
        type: string
        default: "kc-intranet-dev"
      image-name-prefix:
        required: false
        type: string
        default: "ghcr.io/kitconcept/kitconcept-intranet"
      node-version:
        required: false
        type: string
        default: "22.x"
      python-version:
        required: false
        type: string
        default: "3.12"
    outputs:
      acceptance:
        description: "Flag reporting if we should run the acceptance jobs"
        value: ${{ jobs.config.outputs.acceptance }}
      backend:
        description: "Flag reporting if we should run the backend jobs"
        value: ${{ jobs.config.outputs.backend }}
      devops:
        description: "Flag reporting if we should run the devops jobs"
        value: ${{ jobs.config.outputs.devops }}
      docs:
        description: "Flag reporting if we should run the docs jobs"
        value: ${{ jobs.config.outputs.docs }}
      frontend:
        description: "Flag reporting if we should run the frontend jobs"
        value: ${{ jobs.config.outputs.frontend }}
      deploy:
        description: "Flag reporting if we should deploy"
        value: ${{ jobs.config.outputs.deploy }}
      base-tag:
        description: "Base tag to be used when creating container images"
        value: ${{ jobs.config.outputs.base-tag }}
      image-name-prefix:
        description: "Image name prefix for container images"
        value: ${{ inputs.image-name-prefix }}
      node-version:
        description: "Node version to be used"
        value: ${{ inputs.node-version }}
      python-version:
        description: "Python version to be used"
        value: ${{ inputs.python-version }}
      kc-version:
        description: "kitconcept-core version to be used"
        value: ${{ jobs.config.outputs.kc-version }}
      volto-version:
        description: "Volto version to be used"
        value: ${{ jobs.config.outputs.volto-version }}
      hostname:
        description: "Deploy: Hostname to be used for the site"
        value: ${{ inputs.hostname }}
      certresolver:
        description: "Certresolver to be used"
        value: ${{ inputs.certresolver }}
      environment:
        description: "Deploy: Environment used to get secrets and variables from."
        value: ${{ jobs.config.outputs.environment }}
      stack-name:
        description: "Deploy: Name of the Docker stack to be used"
        value: ${{ jobs.config.outputs.stack-name }}
      stack-prefix:
        description: "Deploy: Short name to be used to create Traefik labels"
        value: ${{ inputs.stack-prefix }}

jobs:
  config:
    runs-on: ubuntu-latest
    outputs:
      acceptance: ${{ steps.filter.outputs.acceptance }}
      backend: ${{ steps.filter.outputs.backend }}
      devops: ${{ steps.filter.outputs.devops }}
      docs: ${{ steps.filter.outputs.docs }}
      frontend: ${{ steps.filter.outputs.frontend }}
      deploy: ${{ steps.filter.outputs.deploy }}
      base-tag: ${{ steps.vars.outputs.BASE_TAG }}
      kc-version: ${{ steps.vars.outputs.kc-version }}
      volto-version: ${{ steps.vars.outputs.volto-version }}
      environment: ${{ steps.vars.outputs.environment }}
      stack-name: ${{ steps.vars.outputs.stack-name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute several vars needed for the CI
        id: vars
        run: |
          echo "BASE_TAG=sha-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "kc-version=$(cat backend/version.txt)" >> $GITHUB_OUTPUT
          python3 -c 'import json; data = json.load(open("./frontend/mrs.developer.json")); print("volto-version=" + (data["core"].get("tag") or "latest"))' >> $GITHUB_OUTPUT
          environment=${{ inputs.hostname }}
          echo "environment=${environment}" >> $GITHUB_OUTPUT
          echo "stack-name=${environment//./-}" >> $GITHUB_OUTPUT

      - uses: dorny/paths-filter@v3.0.2
        id: filter
        with:
          filters: |
            acceptance:
              - '.github/workflows/acceptance*'
              - '.github/workflows/backend*'
              - '.github/workflows/frontend*'
              - 'backend/**'
              - 'frontend/**'
            backend:
              - 'backend/**'
              - '.github/workflows/backend*'
            devops:
              - 'devops/**'
            docs:
              - '.readthedocs.yaml'
              - 'docs/**'
              - '.github/workflows/docs.yaml'
            frontend:
              - 'frontend/**'
              - '.github/workflows/frontend*'
            deploy:
              - 'backend/**'
              - 'frontend/**'
              - '.github/workflows/backend*'
              - '.github/workflows/frontend*'

      - name: Test vars
        run: |
          echo "BASE_TAG: ${{ steps.vars.outputs.BASE_TAG }}"
          echo 'kc-version: ${{ steps.vars.outputs.kc-version }}'
          echo 'volto-version: ${{ steps.vars.outputs.volto-version }}'
          echo 'environment: ${{ steps.vars.outputs.environment }}'
          echo 'stack-name: ${{ steps.vars.outputs.stack-name }}'
          echo 'event-name: ${{ github.event_name }}'
          echo "ref-name: ${{ github.ref_name }}"
          echo 'Paths - acceptance: ${{ steps.filter.outputs.acceptance }}'
          echo 'Paths - backend: ${{ steps.filter.outputs.backend }}'
          echo 'Paths - devops: ${{ steps.filter.outputs.devops }}'
          echo 'Paths - docs: ${{ steps.filter.outputs.docs }}'
          echo 'Paths - frontend: ${{ steps.filter.outputs.frontend }}'